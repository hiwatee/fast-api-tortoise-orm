"""
This type stub file was generated by pyright.
"""

import inspect
from typing import Any, Callable, Dict, List, Mapping, Optional, Sequence, Tuple, Type, Union
from fastapi import params
from fastapi.concurrency import AsyncExitStack
from fastapi.dependencies.models import Dependant
from pydantic.error_wrappers import ErrorWrapper
from pydantic.fields import ModelField, SHAPE_LIST, SHAPE_SEQUENCE, SHAPE_SET, SHAPE_TUPLE, SHAPE_TUPLE_ELLIPSIS
from starlette.background import BackgroundTasks
from starlette.datastructures import FormData, Headers, QueryParams
from starlette.requests import Request
from starlette.responses import Response
from starlette.websockets import WebSocket

sequence_shapes = SHAPE_LIST, SHAPE_SET, SHAPE_TUPLE, SHAPE_SEQUENCE, SHAPE_TUPLE_ELLIPSIS
sequence_types = (list, set, tuple)
sequence_shape_to_type = { SHAPE_LIST: list,SHAPE_SET: set,SHAPE_TUPLE: tuple,SHAPE_SEQUENCE: list,SHAPE_TUPLE_ELLIPSIS: list }
multipart_not_installed_error = 'Form data requires "python-multipart" to be installed. \n' 'You can install "python-multipart" with: \n\n' "pip install python-multipart\n"
multipart_incorrect_install_error = 'Form data requires "python-multipart" to be installed. ' 'It seems you installed "multipart" instead. \n' 'You can remove "multipart" with: \n\n' "pip uninstall multipart\n\n" 'And then install "python-multipart" with: \n\n' "pip install python-multipart\n"
def check_file_field(field: ModelField) -> None:
    ...

def get_param_sub_dependant(*, param: inspect.Parameter, path: str, security_scopes: Optional[List[str]] = ...) -> Dependant:
    ...

def get_parameterless_sub_dependant(*, depends: params.Depends, path: str) -> Dependant:
    ...

def get_sub_dependant(*, depends: params.Depends, dependency: Callable, path: str, name: Optional[str] = ..., security_scopes: Optional[List[str]] = ...) -> Dependant:
    ...

CacheKey = Tuple[Optional[Callable], Tuple[str, ...]]
def get_flat_dependant(dependant: Dependant, *, skip_repeats: bool = ..., visited: Optional[List[CacheKey]] = ...) -> Dependant:
    ...

def get_flat_params(dependant: Dependant) -> List[ModelField]:
    ...

def is_scalar_field(field: ModelField) -> bool:
    ...

def is_scalar_sequence_field(field: ModelField) -> bool:
    ...

def get_typed_signature(call: Callable) -> inspect.Signature:
    ...

def get_typed_annotation(param: inspect.Parameter, globalns: Dict[str, Any]) -> Any:
    ...

async_contextmanager_dependencies_error = """
FastAPI dependencies with yield require Python 3.7 or above,
or the backports for Python 3.6, installed with:
    pip install async-exit-stack async-generator
"""
def check_dependency_contextmanagers() -> None:
    ...

def get_dependant(*, path: str, call: Callable, name: Optional[str] = ..., security_scopes: Optional[List[str]] = ..., use_cache: bool = ...) -> Dependant:
    ...

def add_non_field_param_to_dependency(*, param: inspect.Parameter, dependant: Dependant) -> Optional[bool]:
    ...

def get_param_field(*, param: inspect.Parameter, param_name: str, default_field_info: Type[params.Param] = ..., force_type: Optional[params.ParamTypes] = ..., ignore_default: bool = ...) -> ModelField:
    ...

def add_param_to_fields(*, field: ModelField, dependant: Dependant) -> None:
    ...

def is_coroutine_callable(call: Callable) -> bool:
    ...

def is_async_gen_callable(call: Callable) -> bool:
    ...

def is_gen_callable(call: Callable) -> bool:
    ...

async def solve_generator(*, call: Callable, stack: AsyncExitStack, sub_values: Dict[str, Any]) -> Any:
    ...

async def solve_dependencies(*, request: Union[Request, WebSocket], dependant: Dependant, body: Optional[Union[Dict[str, Any], FormData]] = ..., background_tasks: Optional[BackgroundTasks] = ..., response: Optional[Response] = ..., dependency_overrides_provider: Optional[Any] = ..., dependency_cache: Optional[Dict[Tuple[Callable, Tuple[str]], Any]] = ...) -> Tuple[Dict[str, Any], List[ErrorWrapper], Optional[BackgroundTasks], Response, Dict[Tuple[Callable, Tuple[str]], Any]]:
    ...

def request_params_to_args(required_params: Sequence[ModelField], received_params: Union[Mapping[str, Any], QueryParams, Headers]) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:
    ...

async def request_body_to_args(required_params: List[ModelField], received_body: Optional[Union[Dict[str, Any], FormData]]) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:
    ...

def get_missing_field_error(loc: Tuple[str, ...]) -> ErrorWrapper:
    ...

def get_schema_compatible_field(*, field: ModelField) -> ModelField:
    ...

def get_body_field(*, dependant: Dependant, name: str) -> Optional[ModelField]:
    ...

