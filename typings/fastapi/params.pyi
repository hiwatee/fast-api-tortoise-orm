"""
This type stub file was generated by pyright.
"""

from enum import Enum
from typing import Any, Callable, Optional, Sequence
from pydantic.fields import FieldInfo

class ParamTypes(Enum):
    query = ...
    header = ...
    path = ...
    cookie = ...


class Param(FieldInfo):
    in_: ParamTypes
    def __init__(self, default: Any, *, alias: Optional[str] = ..., title: Optional[str] = ..., description: Optional[str] = ..., gt: Optional[float] = ..., ge: Optional[float] = ..., lt: Optional[float] = ..., le: Optional[float] = ..., min_length: Optional[int] = ..., max_length: Optional[int] = ..., regex: Optional[str] = ..., deprecated: Optional[bool] = ..., **extra: Any) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    


class Path(Param):
    in_ = ...
    def __init__(self, default: Any, *, alias: Optional[str] = ..., title: Optional[str] = ..., description: Optional[str] = ..., gt: Optional[float] = ..., ge: Optional[float] = ..., lt: Optional[float] = ..., le: Optional[float] = ..., min_length: Optional[int] = ..., max_length: Optional[int] = ..., regex: Optional[str] = ..., deprecated: Optional[bool] = ..., **extra: Any) -> None:
        ...
    


class Query(Param):
    in_ = ...
    def __init__(self, default: Any, *, alias: Optional[str] = ..., title: Optional[str] = ..., description: Optional[str] = ..., gt: Optional[float] = ..., ge: Optional[float] = ..., lt: Optional[float] = ..., le: Optional[float] = ..., min_length: Optional[int] = ..., max_length: Optional[int] = ..., regex: Optional[str] = ..., deprecated: Optional[bool] = ..., **extra: Any) -> None:
        ...
    


class Header(Param):
    in_ = ...
    def __init__(self, default: Any, *, alias: Optional[str] = ..., convert_underscores: bool = ..., title: Optional[str] = ..., description: Optional[str] = ..., gt: Optional[float] = ..., ge: Optional[float] = ..., lt: Optional[float] = ..., le: Optional[float] = ..., min_length: Optional[int] = ..., max_length: Optional[int] = ..., regex: Optional[str] = ..., deprecated: Optional[bool] = ..., **extra: Any) -> None:
        ...
    


class Cookie(Param):
    in_ = ...
    def __init__(self, default: Any, *, alias: Optional[str] = ..., title: Optional[str] = ..., description: Optional[str] = ..., gt: Optional[float] = ..., ge: Optional[float] = ..., lt: Optional[float] = ..., le: Optional[float] = ..., min_length: Optional[int] = ..., max_length: Optional[int] = ..., regex: Optional[str] = ..., deprecated: Optional[bool] = ..., **extra: Any) -> None:
        ...
    


class Body(FieldInfo):
    def __init__(self, default: Any, *, embed: bool = ..., media_type: str = ..., alias: Optional[str] = ..., title: Optional[str] = ..., description: Optional[str] = ..., gt: Optional[float] = ..., ge: Optional[float] = ..., lt: Optional[float] = ..., le: Optional[float] = ..., min_length: Optional[int] = ..., max_length: Optional[int] = ..., regex: Optional[str] = ..., **extra: Any) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    


class Form(Body):
    def __init__(self, default: Any, *, media_type: str = ..., alias: Optional[str] = ..., title: Optional[str] = ..., description: Optional[str] = ..., gt: Optional[float] = ..., ge: Optional[float] = ..., lt: Optional[float] = ..., le: Optional[float] = ..., min_length: Optional[int] = ..., max_length: Optional[int] = ..., regex: Optional[str] = ..., **extra: Any) -> None:
        ...
    


class File(Form):
    def __init__(self, default: Any, *, media_type: str = ..., alias: Optional[str] = ..., title: Optional[str] = ..., description: Optional[str] = ..., gt: Optional[float] = ..., ge: Optional[float] = ..., lt: Optional[float] = ..., le: Optional[float] = ..., min_length: Optional[int] = ..., max_length: Optional[int] = ..., regex: Optional[str] = ..., **extra: Any) -> None:
        ...
    


class Depends:
    def __init__(self, dependency: Optional[Callable] = ..., *, use_cache: bool = ...) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    


class Security(Depends):
    def __init__(self, dependency: Optional[Callable] = ..., *, scopes: Optional[Sequence[str]] = ..., use_cache: bool = ...) -> None:
        ...
    


