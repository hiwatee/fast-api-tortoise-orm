"""
This type stub file was generated by pyright.
"""

from typing import List, Optional
from fastapi.openapi.models import OAuthFlows as OAuthFlowsModel
from fastapi.security.base import SecurityBase
from starlette.requests import Request

class OAuth2PasswordRequestForm:
    """
    This is a dependency class, use it like:

        @app.post("/login")
        def login(form_data: OAuth2PasswordRequestForm = Depends()):
            data = form_data.parse()
            print(data.username)
            print(data.password)
            for scope in data.scopes:
                print(scope)
            if data.client_id:
                print(data.client_id)
            if data.client_secret:
                print(data.client_secret)
            return data


    It creates the following Form request parameters in your endpoint:

    grant_type: the OAuth2 spec says it is required and MUST be the fixed string "password".
        Nevertheless, this dependency class is permissive and allows not passing it. If you want to enforce it,
        use instead the OAuth2PasswordRequestFormStrict dependency.
    username: username string. The OAuth2 spec requires the exact field name "username".
    password: password string. The OAuth2 spec requires the exact field name "password".
    scope: Optional string. Several scopes (each one a string) separated by spaces. E.g.
        "items:read items:write users:read profile openid"
    client_id: optional string. OAuth2 recommends sending the client_id and client_secret (if any)
        using HTTP Basic auth, as: client_id:client_secret
    client_secret: optional string. OAuth2 recommends sending the client_id and client_secret (if any)
        using HTTP Basic auth, as: client_id:client_secret
    """
    def __init__(self, grant_type: str = ..., username: str = ..., password: str = ..., scope: str = ..., client_id: Optional[str] = ..., client_secret: Optional[str] = ...) -> None:
        ...
    


class OAuth2PasswordRequestFormStrict(OAuth2PasswordRequestForm):
    """
    This is a dependency class, use it like:

        @app.post("/login")
        def login(form_data: OAuth2PasswordRequestFormStrict = Depends()):
            data = form_data.parse()
            print(data.username)
            print(data.password)
            for scope in data.scopes:
                print(scope)
            if data.client_id:
                print(data.client_id)
            if data.client_secret:
                print(data.client_secret)
            return data


    It creates the following Form request parameters in your endpoint:

    grant_type: the OAuth2 spec says it is required and MUST be the fixed string "password".
        This dependency is strict about it. If you want to be permissive, use instead the
        OAuth2PasswordRequestForm dependency class.
    username: username string. The OAuth2 spec requires the exact field name "username".
    password: password string. The OAuth2 spec requires the exact field name "password".
    scope: Optional string. Several scopes (each one a string) separated by spaces. E.g.
        "items:read items:write users:read profile openid"
    client_id: optional string. OAuth2 recommends sending the client_id and client_secret (if any)
        using HTTP Basic auth, as: client_id:client_secret
    client_secret: optional string. OAuth2 recommends sending the client_id and client_secret (if any)
        using HTTP Basic auth, as: client_id:client_secret
    """
    def __init__(self, grant_type: str = ..., username: str = ..., password: str = ..., scope: str = ..., client_id: Optional[str] = ..., client_secret: Optional[str] = ...) -> None:
        ...
    


class OAuth2(SecurityBase):
    def __init__(self, *, flows: OAuthFlowsModel = ..., scheme_name: Optional[str] = ..., auto_error: Optional[bool] = ...) -> None:
        ...
    
    async def __call__(self, request: Request) -> Optional[str]:
        ...
    


class OAuth2PasswordBearer(OAuth2):
    def __init__(self, tokenUrl: str, scheme_name: Optional[str] = ..., scopes: Optional[dict] = ..., auto_error: bool = ...) -> None:
        ...
    
    async def __call__(self, request: Request) -> Optional[str]:
        ...
    


class OAuth2AuthorizationCodeBearer(OAuth2):
    def __init__(self, authorizationUrl: str, tokenUrl: str, refreshUrl: Optional[str] = ..., scheme_name: Optional[str] = ..., scopes: Optional[dict] = ..., auto_error: bool = ...) -> None:
        ...
    
    async def __call__(self, request: Request) -> Optional[str]:
        ...
    


class SecurityScopes:
    def __init__(self, scopes: Optional[List[str]] = ...) -> None:
        ...
    


