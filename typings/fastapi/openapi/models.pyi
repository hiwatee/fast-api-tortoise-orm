"""
This type stub file was generated by pyright.
"""

from enum import Enum
from typing import Dict, Union
from pydantic import AnyUrl, BaseModel

class Contact(BaseModel):
    ...


class License(BaseModel):
    name: str
    ...


class Info(BaseModel):
    title: str
    version: str
    ...


class ServerVariable(BaseModel):
    default: str
    ...


class Server(BaseModel):
    url: Union[AnyUrl, str]
    ...


class Reference(BaseModel):
    ...


class Discriminator(BaseModel):
    propertyName: str
    ...


class XML(BaseModel):
    ...


class ExternalDocumentation(BaseModel):
    url: AnyUrl
    ...


class SchemaBase(BaseModel):
    ...


class Schema(SchemaBase):
    ...


class Example(BaseModel):
    ...


class ParameterInType(Enum):
    query = ...
    header = ...
    path = ...
    cookie = ...


class Encoding(BaseModel):
    ...


class MediaType(BaseModel):
    ...


class ParameterBase(BaseModel):
    ...


class Parameter(ParameterBase):
    name: str
    ...


class Header(ParameterBase):
    ...


class EncodingWithHeaders(Encoding):
    ...


class RequestBody(BaseModel):
    content: Dict[str, MediaType]
    ...


class Link(BaseModel):
    ...


class Response(BaseModel):
    description: str
    ...


class Operation(BaseModel):
    responses: Dict[str, Response]
    ...


class PathItem(BaseModel):
    ...


class OperationWithCallbacks(BaseModel):
    ...


class SecuritySchemeType(Enum):
    apiKey = ...
    http = ...
    oauth2 = ...
    openIdConnect = ...


class SecurityBase(BaseModel):
    ...


class APIKeyIn(Enum):
    query = ...
    header = ...
    cookie = ...


class APIKey(SecurityBase):
    type_ = ...
    name: str


class HTTPBase(SecurityBase):
    type_ = ...
    scheme: str


class HTTPBearer(HTTPBase):
    scheme = ...


class OAuthFlow(BaseModel):
    ...


class OAuthFlowImplicit(OAuthFlow):
    authorizationUrl: str
    ...


class OAuthFlowPassword(OAuthFlow):
    tokenUrl: str
    ...


class OAuthFlowClientCredentials(OAuthFlow):
    tokenUrl: str
    ...


class OAuthFlowAuthorizationCode(OAuthFlow):
    authorizationUrl: str
    tokenUrl: str
    ...


class OAuthFlows(BaseModel):
    ...


class OAuth2(SecurityBase):
    type_ = ...
    flows: OAuthFlows


class OpenIdConnect(SecurityBase):
    type_ = ...
    openIdConnectUrl: str


SecurityScheme = Union[APIKey, HTTPBase, OAuth2, OpenIdConnect, HTTPBearer]
class Components(BaseModel):
    ...


class Tag(BaseModel):
    name: str
    ...


class OpenAPI(BaseModel):
    openapi: str
    info: Info
    paths: Dict[str, PathItem]
    ...


