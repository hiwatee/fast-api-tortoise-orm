"""
This type stub file was generated by pyright.
"""

from enum import Enum
from typing import Any, Dict, List, Optional, Sequence, Set, Tuple, Type, Union
from fastapi import routing
from fastapi.dependencies.models import Dependant
from fastapi.openapi.constants import REF_PREFIX
from pydantic import BaseModel
from pydantic.fields import ModelField
from starlette.routing import BaseRoute

validation_error_definition = { "title": "ValidationError","type": "object","properties": { "loc": { "title": "Location","type": "array","items": { "type": "string" } },"msg": { "title": "Message","type": "string" },"type": { "title": "Error Type","type": "string" } },"required": ["loc", "msg", "type"] }
validation_error_response_definition = { "title": "HTTPValidationError","type": "object","properties": { "detail": { "title": "Detail","type": "array","items": { "$ref": REF_PREFIX + "ValidationError" } } } }
def get_openapi_security_definitions(flat_dependant: Dependant) -> Tuple[Dict, List]:
    ...

def get_openapi_operation_parameters(*, all_route_params: Sequence[ModelField], model_name_map: Dict[Union[Type[BaseModel], Type[Enum]], str]) -> List[Dict[str, Any]]:
    ...

def get_openapi_operation_request_body(*, body_field: Optional[ModelField], model_name_map: Dict[Union[Type[BaseModel], Type[Enum]], str]) -> Optional[Dict]:
    ...

def generate_operation_id(*, route: routing.APIRoute, method: str) -> str:
    ...

def generate_operation_summary(*, route: routing.APIRoute, method: str) -> str:
    ...

def get_openapi_operation_metadata(*, route: routing.APIRoute, method: str) -> Dict:
    ...

def get_openapi_path(*, route: routing.APIRoute, model_name_map: Dict[Type, str]) -> Tuple[Dict, Dict, Dict]:
    ...

def get_flat_models_from_routes(routes: Sequence[BaseRoute]) -> Set[Union[Type[BaseModel], Type[Enum]]]:
    ...

def get_openapi(*, title: str, version: str, openapi_version: str = ..., description: Optional[str] = ..., routes: Sequence[BaseRoute], tags: Optional[List[Dict[str, Any]]] = ..., servers: Optional[List[Dict[str, Union[str, Any]]]] = ...) -> Dict:
    ...

