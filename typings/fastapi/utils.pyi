"""
This type stub file was generated by pyright.
"""

from enum import Enum
from typing import Any, Dict, Optional, Set, Type, Union
from pydantic import BaseConfig, BaseModel
from pydantic.class_validators import Validator
from pydantic.fields import FieldInfo, ModelField, UndefinedType

def get_model_definitions(*, flat_models: Set[Union[Type[BaseModel], Type[Enum]]], model_name_map: Dict[Union[Type[BaseModel], Type[Enum]], str]) -> Dict[str, Any]:
    ...

def get_path_param_names(path: str) -> Set[str]:
    ...

def create_response_field(name: str, type_: Type[Any], class_validators: Optional[Dict[str, Validator]] = ..., default: Optional[Any] = ..., required: Union[bool, UndefinedType] = ..., model_config: Type[BaseConfig] = ..., field_info: Optional[FieldInfo] = ..., alias: Optional[str] = ...) -> ModelField:
    """
    Create a new response field. Raises if type_ is invalid.
    """
    ...

def create_cloned_field(field: ModelField, *, cloned_types: Optional[Dict[Type[BaseModel], Type[BaseModel]]] = ...) -> ModelField:
    ...

def generate_operation_id_for_path(*, name: str, path: str, method: str) -> str:
    ...

def deep_dict_update(main_dict: dict, update_dict: dict) -> None:
    ...

